import java.nio.file.Files
import java.util.stream.Collectors

plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '1.17.4'
    id 'com.diffplug.spotless' version '6.25.0'
}

group = "org.kohsuke.stapler.idea"
version = "3.0.5"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://repo.jenkins-ci.org/releases/"
    }
}

dependencies {
    implementation('org.jenkins-ci:commons-jexl:1.1-jenkins-20111212') {
        // Provided by the Platform
        exclude group: "commons-logging", module: "commons-logging"
    }
    implementation 'net.java.dev.textile-j:textile-j:2.2.864'
    implementation 'org.apache.commons:commons-text:1.13.0'

    testImplementation 'junit:junit:4.13.2'
}

tasks.withType(JavaCompile) {
    //enable compiler warnings
    options.deprecation = true
    options.compilerArgs << "-Xlint:all"
    // write them to a file so that Warnings NG plugin can parse them.
    doFirst {
        logging.addStandardErrorListener({ message ->
            file("${buildDir}/javac.log") << message
        } as StandardOutputListener)
    }
}

// See https://github.com/JetBrains/gradle-intellij-plugin/
// https://plugins.jetbrains.com/docs/intellij/tools-gradle-intellij-plugin.html#configuration-intellij-extension

// https://plugins.jetbrains.com/docs/intellij/build-number-ranges.html
// https://plugins.jetbrains.com/docs/marketplace/product-versions-in-use-statistics.html
// https://www.jetbrains.com/idea/download/other.html
intellij {
    version = ideaVersion
    type = ideaType
    plugins = platformPlugins.tokenize(',')*.trim()
}

patchPluginXml {
    sinceBuild = "233.00"
    untilBuild = ""
    pluginDescription = extractPluginDescription()
    changeNotes = """
      <h3>3.0.5</h3>
      <ul>
        <li>🚀 Use JetBrains Marketplace exception analyzer</li>
        <li>👻 Compatibility baseline is changed to 2023.3</li>
      </ul>
      <h3>3.0.4</h3>
      <ul>
        <li>🐛 Clean up API usage to remain compatible with 2024.2</li>
      </ul>
      <h3>3.0.3</h3>
      <ul>
        <li>👻 Compatibility baseline is changed to 2022.3 which also changes Java level to 17. No functional changes are expected.</li>
        <li>🚀 Report custom tag attributes that are marked deprecated.</li>
      </ul>
      <h3>3.0.2</h3>
      <ul>
        <li>✍️ Usages of Apache commons-lang2 are removed for IntelliJ compatibility reasons</li>
        <li>📦 Build tools are upgrade</li>
        <li><a href="https://github.com/jenkinsci/idea-stapler-plugin/releases/tag/3.0.2">GitHub Release Notes</a></li>
      </ul>
      <h3>3.0.1</h3>
      <ul>
        <li>🚀 Update Jelly Tag Library XSDs.</li>
        <li>🚀 Add support for groovy views as well as help files in the structure view.</li>
        <li>🚀 Offer this plugin when a project has dependency on org.jenkins-ci.main:jenkins-core</li>
        <li><a href="https://github.com/jenkinsci/idea-stapler-plugin/releases/tag/3.0.1">GitHub Release Notes</a></li>
      </ul>
      <h3>3.0.0</h3>
      <ul>
        <li>💥 Unused Stapler Facet is removed. You might get a warning about it from IntelliJ. Unreadable facet can be safely removed.</li>
        <li>🚀 Add 'since' attribute to the 'attribute' tag of the Stapler tag library</li>
        <li>🐛 Fix exception caused by i18n with single-quote</li>
        <li><a href="https://github.com/jenkinsci/idea-stapler-plugin/releases/tag/3.0.0">GitHub Release Notes</a></li>
      </ul>
      <h3>2.1.0</h3>
      <ul>
        <li>🎉 <strong>Views are shown in the Class' Structure tool window.</strong></li>
        <li>🎉 Jelly is now its own separate file type with its own icon</li>
        <li>🚀 A file template is added for a Jenkins Jelly View</li>
        <li>🐛 Fix "IllegalArgumentException: Invalid range specified: (1, -1)" when editing style attribute in Jelly files</li>
      </ul>
      <h3>2.0.8</h3>
        <h4>Plugin is renamed from "Stapler Framework Support" to "Jenkins Development Support"</h4>
    """
}

runPluginVerifier {
    subsystemsToCheck = "without-android"
}

listProductsReleases {
    sinceVersion = sinceIdeaVersion ?: ideaVersion
}

publishPlugin {
    token = intellijPublishToken
}

// Avoids duplication, but hard to troubleshoot if fails. For some reason exception is not printed in the output.
// It just says: "No signature of method: build_XXX.patchPluginXml() is applicable for argument types: ..."
String extractPluginDescription() {
    def final start = "<!-- Plugin description -->"
    def final end = "<!-- Plugin description end -->"
    try (def lines = Files.lines(file("README.md").toPath())) {
        def description = lines.dropWhile({it != start})
            .takeWhile({it != end})
            .collect(Collectors.joining('\n'))
        if (!description) {
            throw GradleException("Plugin description section not found in README.md:\n$start ... $end")
        }
        return description
    }
}

spotless {
    java {
        palantirJavaFormat('2.39.0').formatJavadoc(true)
        indentWithSpaces()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
}
