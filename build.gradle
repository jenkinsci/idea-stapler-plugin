// IntelliJ plugins are built with https://github.com/JetBrains/intellij-platform-gradle-plugin
// which is documented at https://plugins.jetbrains.com/docs/intellij/tools-intellij-platform-gradle-plugin.html

import org.jetbrains.intellij.platform.gradle.TestFrameworkType
import org.jetbrains.intellij.platform.gradle.tasks.VerifyPluginTask

import java.nio.file.Files
import java.util.stream.Collectors

plugins {
    id 'java'
    id 'org.jetbrains.intellij.platform' version '2.1.0'
}

group = "org.kohsuke.stapler.idea"
version = "3.0.5-SNAPSHOT"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
    intellijPlatform {
        defaultRepositories()
    }
    maven {
        url "https://repo.jenkins-ci.org/releases/"
    }
}

dependencies {
    intellijPlatform {
        create(ideaType, ideaVersion)
        bundledPlugins(platformPlugins.tokenize(',')*.trim())

        // Required for runIDE task
        instrumentationTools()
        // Required for verifyPlugin task
        pluginVerifier()

        testFramework TestFrameworkType.Platform.INSTANCE
    }
    implementation('org.jenkins-ci:commons-jexl:1.1-jenkins-20111212') {
        // Provided by the Platform
        exclude group: "commons-logging", module: "commons-logging"
    }
    implementation 'net.java.dev.textile-j:textile-j:2.2.864'
    implementation 'org.apache.commons:commons-text:1.10.0'

    testImplementation 'junit:junit:4.13.2'
}

tasks.withType(JavaCompile) {
    //enable compiler warnings
    options.deprecation = true
    options.compilerArgs << "-Xlint:all"
    // write them to a file so that Warnings NG plugin can parse them.
    doFirst {
        logging.addStandardErrorListener({ message ->
            file("${buildDir}/javac.log") << message
        } as StandardOutputListener)
    }
}

// https://plugins.jetbrains.com/docs/intellij/tools-intellij-platform-gradle-plugin-extension.html
intellijPlatform {
    pluginConfiguration {
        description = extractPluginDescription()
        changeNotes = """
          <h3>3.0.4</h3>
          <ul>
            <li>üêõ Clean up API usage to remain compatible with 2024.2</li>
          </ul>
          <h3>3.0.3</h3>
          <ul>
            <li>üëª Compatibility baseline is changed to 2022.3 which also changes Java level to 17. No functional changes are expected.</li>
            <li>üöÄ Report custom tag attributes that are marked deprecated.</li>
          </ul>
          <h3>3.0.2</h3>
          <ul>
            <li>‚úçÔ∏è Usages of Apache commons-lang2 are removed for IntelliJ compatibility reasons</li>
            <li>üì¶ Build tools are upgrade</li>
            <li><a href="https://github.com/jenkinsci/idea-stapler-plugin/releases/tag/3.0.2">GitHub Release Notes</a></li>
          </ul>
          <h3>3.0.1</h3>
          <ul>
            <li>üöÄ Update Jelly Tag Library XSDs.</li>
            <li>üöÄ Add support for groovy views as well as help files in the structure view.</li>
            <li>üöÄ Offer this plugin when a project has dependency on org.jenkins-ci.main:jenkins-core</li>
            <li><a href="https://github.com/jenkinsci/idea-stapler-plugin/releases/tag/3.0.1">GitHub Release Notes</a></li>
          </ul>
          <h3>3.0.0</h3>
          <ul>
            <li>üí• Unused Stapler Facet is removed. You might get a warning about it from IntelliJ. Unreadable facet can be safely removed.</li>
            <li>üöÄ Add 'since' attribute to the 'attribute' tag of the Stapler tag library</li>
            <li>üêõ Fix exception caused by i18n with single-quote</li>
            <li><a href="https://github.com/jenkinsci/idea-stapler-plugin/releases/tag/3.0.0">GitHub Release Notes</a></li>
          </ul>
          <h3>2.1.0</h3>
          <ul>
            <li>üéâ <strong>Views are shown in the Class' Structure tool window.</strong></li>
            <li>üéâ Jelly is now its own separate file type with its own icon</li>
            <li>üöÄ A file template is added for a Jenkins Jelly View</li>
            <li>üêõ Fix "IllegalArgumentException: Invalid range specified: (1, -1)" when editing style attribute in Jelly files</li>
          </ul>
          <h3>2.0.8</h3>
            <h4>Plugin is renamed from "Stapler Framework Support" to "Jenkins Development Support"</h4>
          <h3>2.0.7</h3>
          <ul>
            <li>Fix the <code>StackOverflowError</code> in Stapler Custom Jelly Taglibrary</li>
            <li><code>*.jellytag</code> extension is recognized as Jelly. Stapler supports it for Jelly Taglibraries</li>
            <li><code>stapler.xsd</code> is formatted to improve readability</li>
          </ul>
          <h3>2.0.6</h3>
          <ul>
            <li>Switch from deprecated imperative File Type definition to the declarative one. Internal change. No functional changes are expected.</li> 
          </ul>
          <h3>2.0.5</h3>
          <ul>
            <li>Compatibility baseline is changed to 2020.3 which also changes Java level to 11. No functional changes are expected.</li>
          </ul>
          <h3>2.0.4</h3>
          <ul>
            <li>Avoid <code>java.lang.NullPointerException</code> at <code>org.kohsuke.stapler.idea.JellyDocumentationProvider.generateDoc()</code>
            by short-circuiting on <code>null</code> in the nullable parameter.
            </li>
          </ul>
          <h3>2.0.3</h3>
          <ul>
            <li>Revert Jelly file type introduced in 2.0.1. It turned out that there is regression in Intellij 2021.2 which 
            prevents adding extensions to existing File Types (IDEA-277310). Attempt to work it around caused more issues than
             it fixed. Regression should be fixed in 2021.3. Meanwhile *.jelly can be manually added to XML file type.</li>
          </ul>
          <h3>2.0.2</h3>
          <ul>
            <li>Deprecation scheduled for removal are addressed to maintain compatibility with 2021.3 onward</li>
          </ul>
          <h3>2.0.1</h3>
          <ul>
            <li>JEXL Inspection crashes are fixed by addressing logger initialization issue in JEXL</li>
            <li>Restore the association between *.jelly extension and XML language</li>
          </ul>
        """
        ideaVersion {
            sinceBuild = "223.00"
            // To keep the open upper bound v2 of gradle plugin expects this option omitted instead of set to ""
            // untilBuild = ""
        }

        pluginVerification {
            subsystemsToCheck = VerifyPluginTask.Subsystems.WITHOUT_ANDROID

            ides {
                recommended()
            }
        }
    }
}

publishPlugin {
    token = intellijPublishToken
}

// Avoids duplication, but hard to troubleshoot if fails. For some reason exception is not printed in the output.
// It just says: "No signature of method: build_XXX.patchPluginXml() is applicable for argument types: ..."
String extractPluginDescription() {
    def final start = "<!-- Plugin description -->"
    def final end = "<!-- Plugin description end -->"
    try (def lines = Files.lines(file("README.md").toPath())) {
        def description = lines.dropWhile({ it != start })
            .takeWhile({ it != end })
            .collect(Collectors.joining('\n'))
        if (!description) {
            throw GradleException("Plugin description section not found in README.md:\n$start ... $end")
        }
        return description
    }
}